// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO comments 
    (content, user_name, post_id)
VALUES 
    (?, ?, ?)
`

type CreateCommentParams struct {
	Content  string `json:"content"`
	UserName string `json:"user_name"`
	PostID   int32  `json:"post_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment, arg.Content, arg.UserName, arg.PostID)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
UPDATE comments
SET deleted_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, created_at, updated_at, deleted_at, content, score, user_name, post_id
FROM comments
WHERE id = ? AND deleted_at is NULL
`

func (q *Queries) GetComment(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Score,
		&i.UserName,
		&i.PostID,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT id, created_at, updated_at, deleted_at, content, score, user_name, post_id
FROM comments
WHERE deleted_at is NULL
ORDER BY id
`

func (q *Queries) GetComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Content,
			&i.Score,
			&i.UserName,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByPost = `-- name: GetCommentsByPost :many
SELECT id, created_at, updated_at, deleted_at, content, score, user_name, post_id
FROM comments
WHERE post_id = ? AND deleted_at is NULL
`

func (q *Queries) GetCommentsByPost(ctx context.Context, postID int32) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Content,
			&i.Score,
			&i.UserName,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestComment = `-- name: GetLatestComment :one
SELECT id, created_at, updated_at, deleted_at, content, score, user_name, post_id 
FROM comments
WHERE user_name = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestComment(ctx context.Context, userName string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getLatestComment, userName)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Score,
		&i.UserName,
		&i.PostID,
	)
	return i, err
}

const getVotedComment = `-- name: GetVotedComment :one
SELECT
	c.id, c.created_at, c.updated_at, c.deleted_at, c.content, c.score, c.user_name, c.post_id,
	cv.upvoted
FROM
	comments c
	LEFT JOIN comment_votes AS cv ON cv.comment_id = c.id 
	AND cv.user_id = ?
WHERE
	c.deleted_at IS NULL AND
	c.id = ?
`

type GetVotedCommentParams struct {
	UserID int32 `json:"user_id"`
	ID     int32 `json:"id"`
}

type GetVotedCommentRow struct {
	ID        int32        `json:"id"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	Content   string       `json:"content"`
	Score     int32        `json:"score"`
	UserName  string       `json:"user_name"`
	PostID    int32        `json:"post_id"`
	Upvoted   int32        `json:"upvoted"`
}

func (q *Queries) GetVotedComment(ctx context.Context, arg GetVotedCommentParams) (GetVotedCommentRow, error) {
	row := q.db.QueryRowContext(ctx, getVotedComment, arg.UserID, arg.ID)
	var i GetVotedCommentRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Score,
		&i.UserName,
		&i.PostID,
		&i.Upvoted,
	)
	return i, err
}

const getVotedComments = `-- name: GetVotedComments :many
SELECT
	c.id, c.created_at, c.updated_at, c.deleted_at, c.content, c.score, c.user_name, c.post_id,
	IFNULL(cv.upvoted, 0) upvoted
FROM
	comments c
	LEFT JOIN comment_votes AS cv ON cv.comment_id = c.id 
	AND cv.user_id = ?
WHERE
	c.deleted_at IS NULL AND
	c.post_id = ?
`

type GetVotedCommentsParams struct {
	UserID int32 `json:"user_id"`
	PostID int32 `json:"post_id"`
}

type GetVotedCommentsRow struct {
	ID        int32        `json:"id"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	Content   string       `json:"content"`
	Score     int32        `json:"score"`
	UserName  string       `json:"user_name"`
	PostID    int32        `json:"post_id"`
	Upvoted   interface{}  `json:"upvoted"`
}

func (q *Queries) GetVotedComments(ctx context.Context, arg GetVotedCommentsParams) ([]GetVotedCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getVotedComments, arg.UserID, arg.PostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVotedCommentsRow{}
	for rows.Next() {
		var i GetVotedCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Content,
			&i.Score,
			&i.UserName,
			&i.PostID,
			&i.Upvoted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
