// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts 
    (url, filename, thumbnail_filename, user_name, content_type)
VALUES 
    (?, ?, ?, ?, ?)
`

type CreatePostParams struct {
	Url               string `json:"url"`
	Filename          string `json:"filename"`
	ThumbnailFilename string `json:"thumbnail_filename"`
	UserName          string `json:"user_name"`
	ContentType       string `json:"content_type"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Url,
		arg.Filename,
		arg.ThumbnailFilename,
		arg.UserName,
		arg.ContentType,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts 
SET deleted_at = NOW() 
WHERE
	id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT
	id, created_at, updated_at, deleted_at, url, filename, thumbnail_filename, content_type, score, user_level, user_name 
FROM
	posts
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Url,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.ContentType,
			&i.Score,
			&i.UserLevel,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewerPosts = `-- name: GetNewerPosts :many
SELECT
	id, created_at, updated_at, deleted_at, url, filename, thumbnail_filename, content_type, score, user_level, user_name 
FROM
	posts 
WHERE
	deleted_at IS NULL AND
	posts.id >= ? AND
	posts.user_level <= ?
ORDER BY
	posts.id
LIMIT ?
`

type GetNewerPostsParams struct {
	ID        int32 `json:"id"`
	UserLevel int32 `json:"user_level"`
	Limit     int32 `json:"limit"`
}

func (q *Queries) GetNewerPosts(ctx context.Context, arg GetNewerPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getNewerPosts, arg.ID, arg.UserLevel, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Url,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.ContentType,
			&i.Score,
			&i.UserLevel,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOlderPosts = `-- name: GetOlderPosts :many
SELECT
	id, created_at, updated_at, deleted_at, url, filename, thumbnail_filename, content_type, score, user_level, user_name 
FROM
	posts 
WHERE
	deleted_at IS NULL AND
	posts.id <= ? AND
	posts.user_level <= ?
ORDER BY
	posts.id DESC
LIMIT ?
`

type GetOlderPostsParams struct {
	ID        int32 `json:"id"`
	UserLevel int32 `json:"user_level"`
	Limit     int32 `json:"limit"`
}

func (q *Queries) GetOlderPosts(ctx context.Context, arg GetOlderPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getOlderPosts, arg.ID, arg.UserLevel, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Url,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.ContentType,
			&i.Score,
			&i.UserLevel,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT
	id, created_at, updated_at, deleted_at, url, filename, thumbnail_filename, content_type, score, user_level, user_name 
FROM
	posts 
WHERE
	posts.id = ? AND 
	deleted_at IS NULL AND
	posts.user_level <= ?
`

type GetPostParams struct {
	ID        int32 `json:"id"`
	UserLevel int32 `json:"user_level"`
}

func (q *Queries) GetPost(ctx context.Context, arg GetPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, arg.ID, arg.UserLevel)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Url,
		&i.Filename,
		&i.ThumbnailFilename,
		&i.ContentType,
		&i.Score,
		&i.UserLevel,
		&i.UserName,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT
	id, created_at, updated_at, deleted_at, url, filename, thumbnail_filename, content_type, score, user_level, user_name 
FROM
	posts 
WHERE
	deleted_at IS NULL AND
	posts.user_level <= ?
ORDER BY
	posts.id DESC
LIMIT 50
`

func (q *Queries) GetPosts(ctx context.Context, userLevel int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, userLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Url,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.ContentType,
			&i.Score,
			&i.UserLevel,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT
	id, created_at, updated_at, deleted_at, url, filename, thumbnail_filename, content_type, score, user_level, user_name 
FROM
	posts 
WHERE
	user_name = ? AND 
	deleted_at IS NULL AND
	posts.user_level <= ?
ORDER BY posts.id DESC
`

type GetPostsByUserParams struct {
	UserName  string `json:"user_name"`
	UserLevel int32  `json:"user_level"`
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserName, arg.UserLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Url,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.ContentType,
			&i.Score,
			&i.UserLevel,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVotedPost = `-- name: GetVotedPost :one
SELECT
	p.id, p.created_at, p.updated_at, p.deleted_at, p.url, p.filename, p.thumbnail_filename, p.content_type, p.score, p.user_level, p.user_name, 
	IFNULL(pv.upvoted, 0) as upvoted 
FROM
	posts p
	LEFT JOIN post_votes AS pv ON pv.post_id = p.id 
	AND pv.user_id = ? AND
	p.user_level <= ?
WHERE
	p.deleted_at IS NULL AND
	p.id = ?
`

type GetVotedPostParams struct {
	UserID    int32 `json:"user_id"`
	UserLevel int32 `json:"user_level"`
	ID        int32 `json:"id"`
}

type GetVotedPostRow struct {
	ID                int32        `json:"id"`
	CreatedAt         time.Time    `json:"created_at"`
	UpdatedAt         time.Time    `json:"updated_at"`
	DeletedAt         sql.NullTime `json:"deleted_at"`
	Url               string       `json:"url"`
	Filename          string       `json:"filename"`
	ThumbnailFilename string       `json:"thumbnail_filename"`
	ContentType       string       `json:"content_type"`
	Score             int32        `json:"score"`
	UserLevel         int32        `json:"user_level"`
	UserName          string       `json:"user_name"`
	Upvoted           interface{}  `json:"upvoted"`
}

func (q *Queries) GetVotedPost(ctx context.Context, arg GetVotedPostParams) (GetVotedPostRow, error) {
	row := q.db.QueryRowContext(ctx, getVotedPost, arg.UserID, arg.UserLevel, arg.ID)
	var i GetVotedPostRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Url,
		&i.Filename,
		&i.ThumbnailFilename,
		&i.ContentType,
		&i.Score,
		&i.UserLevel,
		&i.UserName,
		&i.Upvoted,
	)
	return i, err
}

const getVotedPosts = `-- name: GetVotedPosts :many
SELECT
	p.id, p.created_at, p.updated_at, p.deleted_at, p.url, p.filename, p.thumbnail_filename, p.content_type, p.score, p.user_level, p.user_name,
	IFNULL(pv.upvoted, 0) as upvoted 
FROM
	posts p
	LEFT JOIN ( SELECT id, created_at, updated_at, deleted_at, upvoted, user_id, post_id FROM post_votes WHERE user_id = ? ) AS pv ON pv.post_id = p.id 
WHERE
	p.deleted_at IS NULL AND
	p.user_level <= ?
ORDER BY p.id DESC
`

type GetVotedPostsParams struct {
	UserID    int32 `json:"user_id"`
	UserLevel int32 `json:"user_level"`
}

type GetVotedPostsRow struct {
	ID                int32        `json:"id"`
	CreatedAt         time.Time    `json:"created_at"`
	UpdatedAt         time.Time    `json:"updated_at"`
	DeletedAt         sql.NullTime `json:"deleted_at"`
	Url               string       `json:"url"`
	Filename          string       `json:"filename"`
	ThumbnailFilename string       `json:"thumbnail_filename"`
	ContentType       string       `json:"content_type"`
	Score             int32        `json:"score"`
	UserLevel         int32        `json:"user_level"`
	UserName          string       `json:"user_name"`
	Upvoted           interface{}  `json:"upvoted"`
}

func (q *Queries) GetVotedPosts(ctx context.Context, arg GetVotedPostsParams) ([]GetVotedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getVotedPosts, arg.UserID, arg.UserLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVotedPostsRow{}
	for rows.Next() {
		var i GetVotedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Url,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.ContentType,
			&i.Score,
			&i.UserLevel,
			&i.UserName,
			&i.Upvoted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostFiles = `-- name: UpdatePostFiles :exec
UPDATE
	posts
SET
	filename = ?,
	thumbnail_filename = ?
WHERE
	id = ?
`

type UpdatePostFilesParams struct {
	Filename          string `json:"filename"`
	ThumbnailFilename string `json:"thumbnail_filename"`
	ID                int32  `json:"id"`
}

func (q *Queries) UpdatePostFiles(ctx context.Context, arg UpdatePostFilesParams) error {
	_, err := q.db.ExecContext(ctx, updatePostFiles, arg.Filename, arg.ThumbnailFilename, arg.ID)
	return err
}
