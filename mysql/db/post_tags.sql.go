// Code generated by sqlc. DO NOT EDIT.
// source: post_tags.sql

package db

import (
	"context"
)

const addTagToPost = `-- name: AddTagToPost :exec
INSERT INTO post_tags (tag_id, post_id) VALUES (?, ?)
`

type AddTagToPostParams struct {
	TagID  int32 `json:"tag_id"`
	PostID int32 `json:"post_id"`
}

func (q *Queries) AddTagToPost(ctx context.Context, arg AddTagToPostParams) error {
	_, err := q.db.ExecContext(ctx, addTagToPost, arg.TagID, arg.PostID)
	return err
}

const getTagsByPost = `-- name: GetTagsByPost :many
SELECT pt.id, pt.score, t.name FROM post_tags pt 
LEFT JOIN tags AS t ON pt.tag_id = t.id 
WHERE pt.post_id = ?
ORDER BY score DESC
`

type GetTagsByPostRow struct {
	ID    int32  `json:"id"`
	Score int32  `json:"score"`
	Name  string `json:"name"`
}

func (q *Queries) GetTagsByPost(ctx context.Context, postID int32) ([]GetTagsByPostRow, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagsByPostRow{}
	for rows.Next() {
		var i GetTagsByPostRow
		if err := rows.Scan(&i.ID, &i.Score, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromPost = `-- name: RemoveTagFromPost :exec
DELETE FROM post_tags WHERE (tag_id, post_id ) = (?, ?)
`

func (q *Queries) RemoveTagFromPost(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeTagFromPost)
	return err
}
