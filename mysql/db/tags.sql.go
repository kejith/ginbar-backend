// Code generated by sqlc. DO NOT EDIT.
// source: tags.sql

package db

import (
	"context"
)

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (name) VALUES (?)
`

func (q *Queries) CreateTag(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createTag, name)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE tags.id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const deleteTagByName = `-- name: DeleteTagByName :exec
DELETE FROM tags WHERE tags.name = ?
`

func (q *Queries) DeleteTagByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteTagByName, name)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name FROM tags WHERE tags.id = ? LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name FROM tags WHERE tags.name = ? LIMIT 1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTags = `-- name: GetTags :many
SELECT id, name FROM tags ORDER BY	id
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
